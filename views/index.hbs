<!--<h1>{{title}}</h1>
<p>Welcome to {{title}}</p>-->

<div class="container-fluid">
    <div class="col">
        <h1>Knockout-Spielwiese</h1>
    </div>
</div>


<div id="mapid"/>


<!--
   sobald verfügbar promise
popup preis und link
nodejs. besten loggin in die Konsole

-->

<script type="text/javascript">

    window.onerror = function (messageOrEvent, source, lineno, colno, error) {
        console.log(messageOrEvent);
        console.log(source);
        console.log(lineno);
        console.log(colno);
        console.log(error);
    };

    //SONSTIGES

    $("#Departure").datepicker({
        changeMonth: true,
        changeYear: true,
        dateFormat: "dd.mm.yy"
    });

    $('#startSearch').click(function (e) {
//disable bzw. enable

        //e.preventDefault();
    });

    //KO
    //KEINE OBSERAVBLES; DA NACHDEM NÄCHSTEN SUCHEN GELÖSCHT UND SONST NUR EIN/AUSGEBLENDET WIRD
    //nur datum...suche obserables
    //array aus pins
    function Filter() {
        /// <summary>Child View Model</summary>
        this.Departure = ko.observable();
        this.Price = ko.observable();
        this.NumberOfCities = ko.observable();
        this.CityCounter = ko.observable();
    }

    function Pin() {
        /// <summary>Child View Model</summary>
        this.Lat = 0;
        this.Long = 0;
        this.City = "";
        this.Price = 0;
        this.Type = "";
        this.TabIndex = 0;
        this.SearchUrl = "";
    }

    var suchObjekt = {
        "searchOptions": {
            "departurePosition": {"id": 377001},
            "arrivalPosition": {"id": 375859},
            "travelModes": ["Flight", "Train", "Bus"],
            "departureDate": "2017-05-20",
            "returnDate": null,
            "passengers": [{"age": 28}],
            "userInfo": {
                "identifier": "0.5zcaxyl2eck",
                "domain": ".com",
                "locale": "en",
                "currency": "EUR"
            },
            "abTestParameters": []
        }
    };

    var SuchObjekt = {
        searchOptions: {
            departurePosition: {id: 377001},
            arrivalPosition: {id: 375859},
            travelModes: ["Flight", "Train", "Bus"],
            departureDate: "2017-05-20",
            returnDate: null,
            passengers: [{age: 28}],
            userInfo: {
                identifier: "0.s92og7hgxo",
                domain: ".com",
                locale: "en",
                currency: "EUR"
            },
            abTestParameters: []
        }
    };

    //new ViewModel(); a.Filter().Departure()
    function ViewModel() {
        var self = this;

        self.SuchObjekt = ko.observable(SuchObjekt);
        self.Filter = ko.observable(new Filter());
        self.Pins = [];//new Pin()


        self.RemoveDate = function (date) {
            alert(self.Pins[0].Price)
            //this.dates.remove(date);
        }
    }


    ViewModel.prototype.addDate = function () {
        var self = this.Pin;
        if (self.Lat) {
            self.Lat = 666;
        }
    };

    var _model = new ViewModel();
    ko.applyBindings(_model);

    $(function () {

        /*//Leaflet*/
        var mymap = L.map('mapid').setView([49.46, 11.06], 6);
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
            maxZoom: 18,
            id: 'rakshak.l937n12c',
            accessToken: 'pk.eyJ1IjoicmFrc2hhayIsImEiOiJ5cHhqeHlRIn0.Vi87VjI1cKbl1lhOn95Lpw'
        }).addTo(mymap);

        console.log("Start!");


        //Filter suche, nicht erneut suchen
        //Tag suche plus Datum nur anzeigen, nachdem Ergebnisse geladen wurden, Filter einblenden
        //ko-binding -> ShowFilter, zeige Prozess wie er die Pins rauslöscht


        Main();


        function GibMirDieSearchId(suchObjekt) {
            //deferred und mit Verzögerung reject, accept

            var dfd = $.Deferred();

            $.ajax({
                headers: {
                    'Content-Type': 'application/json; charset=UTF-8'
                },
                url: "http://www.goeuro.com/GoEuroAPI/rest/api/v5/searches",
                type: "POST",
                crossDomain: true,
                data: suchObjekt,
                success: function (data, textStatus) {
                    setTimeout(function() {
                        console.log(data);

                        dfd.resolve( data );

                    }, 2000);
                },
                always: function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                    console.log('always was called');

                    dfd.reject();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error(errorThrown);
                    //subtrahiere von der Menge der Städte ein, damit Progress stimmt am Ende
//addiere Fehler 1
                    EnableInputs();
                }
            });

            return dfd.promise();

        }

        function Main() {

            try {

                for (var pos = 377002; pos < 377005; pos++) {

                    //_model.SuchObjekt().searchOptions.arrivalPosition.id
                    if (suchObjekt.searchOptions.arrivalPosition.id == pos)
                        continue;

                    if (suchObjekt.searchOptions.departurePosition.id == pos)
                        continue;

                    //änder nur die
                    suchObjekt.searchOptions.arrivalPosition.id = pos;

                    var promiseSearchId = GibMirDieSearchId(JSON.stringify(suchObjekt));

                    promiseSearchId.done(function (data, textStatus, jqXHR) {

                        var searchId = data.searchId;


                        //eigentlicher Ajax call, der das suchergebnis abholt
                        $.ajax({
                            /* - > dieses Suchergebnis filtern, nur billigste - also nur ein Ergebnis - Verbindung anzeigen - > beim klicken auf das Sortieren der Spalten in goeuro im Ajax request nachschauen*/
                            url: "https://www.goeuro.com/GoEuroAPI/rest/api/v5/results?search_id=" + searchId + "&?price_from=1&stops=0|1|2%3B-1&limit=1&offset=0&position_report_enabled=true&all_positions=true&sort_by=price",
                            type: 'GET',
                            crossDomain: true,
                            success: function (data, textStatus) {

                                console.log(data);
                                //überprüfe ob alle Daten korrekt sind erst dann zeichnen sonst loggen in die Konsole ?


                                //hole mir billigstes Angebot - das ist das Erste - d abereits vorsortiert wurde
                                var firstOutbound = data.outbounds[Object.keys(data.outbounds)[0]];

                                if (!firstOutbound)
                                    console.info(data);
                                else {

                                    //nur wenn definiert
                                    var position = data.positions[data.query.arrivalPosition];

                                    ZeichnePin({
                                        Lat: position.latitude,
                                        Long: position.longitude,
                                        City: position.cityName,
                                        Price: (firstOutbound.price / 100),
                                        Type: firstOutbound.mode,
                                        TabIndex: data.query.arrivalPosition,
                                        Duration: Math.round(firstOutbound.duration / 60),
                                        SearchUrl: '<a href="https://www.goeuro.com/travel-search2/results/' + searchId + '/' + firstOutbound.mode + '" target="_blank">goeuro.com</a>'
                                    });

                                }


                            },
                            error: function (xhr, textStatus, errorThrown) {
                                alert('request failed');
                                //subtrahiere von der Menge der Städte ein, damit Progress stimmt am Ende
//addiere Fehler 1
                                EnableInputs();
                            },
                            always: function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) {
                                console.log('always was called');
                            }
                        });
                        //progress. Fail...
                    });
                }

            } catch (e) {
                EnableInputs();
            }


        }

        function ZeichnePin(pin) {

            var text = "<b>Hello " + pin.City + "!</b><br>" +
                    pin.Type + "<br>" +
                    pin.Price + " EUR<br>" +
                    pin.Duration + " h<br>" +
                    pin.SearchUrl + "<br>";

            //todo: click binding to pin, when clicked on that element Ajax call zur wettervorhersage für diesen Tag
            //https://openweathermap.org/current
            //http://www.myweather2.com/developer/apis.aspx?uref=228b1fd1-f8ab-44df-9bd8-1494c086b79e

            var marker = L.marker([pin.Lat, pin.Long]).addTo(mymap).bindPopup(text);
            $(marker._icon).attr('tabindex', pin.TabIndex);

            _model.Pins.push(pin);//zum Filtern bereitstellen

//            console.log($(marker._icon));
        }


        function ShowPin(tabindex) {
            $("img[tabindex='" + tabindex + "']").css("display", "initial");
        }

        function HidePin(tabindex) {
            $("img[tabindex='" + tabindex + "']").css("display", "none");
        }

        function BerechneProgressbar(wert) {
            //oder besser value-Binding ?!
            $("#progressbar").css('width', wert + '%').attr('aria-valuenow', wert);
            $("#progressbar").text(wert + "%");

            //   var tempProzentwert = 25 + (goEuroRestApiCounter * 75 / window.data.Search_Ids.length);
        }

        function EnableInputs() {
            $("input").prop("disabled", true);
        }

        function DisableInputs() {
            $("input").prop("disabled", false);
        }

        function Disable_StartButton() {
            $("#startSearch").prop("disabled", false);
        }

        function Enable_StartButton() {
            $("#startSearch").prop("disabled", true);
        }

    });

</script>